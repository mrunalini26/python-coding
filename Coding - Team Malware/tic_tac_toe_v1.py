import argparse
import numpy as np
import os

class Board():

    def __init__(self):
        self.board_value = ['-' for i in range(9)]
        self.board_a = f"""          {self.board_value[0]} | {self.board_value[1]} | {self.board_value[2]} 
        _____________
          {self.board_value[3]} | {self.board_value[4]} | {self.board_value[5]}
        _____________
          {self.board_value[6]} | {self.board_value[7]} | {self.board_value[8]}\n""" 
        self.board_positions = [i for i in range(9)]
        self.rule_board1 = f"""          {self.board_positions[0]} | {self.board_positions[1]} | {self.board_positions[2]}
        _____________ 
          {self.board_positions[3]} | {self.board_positions[4]} | {self.board_positions[5]}
        _____________ 
          {self.board_positions[6]} | {self.board_positions[7]} | {self.board_positions[8]}\n""" 


    def modify_board(self, position, type):
        self.board_value[position] = type
        self.board_a = f"""          {self.board_value[0]} | {self.board_value[1]} | {self.board_value[2]}
        _____________ 
          {self.board_value[3]} | {self.board_value[4]} | {self.board_value[5]}
        _____________ 
          {self.board_value[6]} | {self.board_value[7]} | {self.board_value[8]}\n"""    
  

class Player():
    
    def __init__(self,symbol):
        self.symbol = symbol 


class Game():

    def show_board(self, board):
        print("This is how our game board looks at the start of the game")
        print(f'{board.board_a}')
        print('The above board is marked with different numbers to indicate the different positions on the board as shown below. \n')
        print(f'{board.rule_board1}')
        print('When it is your turn to play please put the mark in the desired position by entering the number on the console.')


    def check_if_valid_move(self, position, board):
        if str(position).isdigit() == True:
            position = int(position)
            if ((board[position] != '-') | ((position<0) & (position>9))):
                return True
        return False
    
    def check_win(self, player, board):  ##checking row and column win
        win_possibilities = [[1,2,3], [4,5,6], [7,8,9], [1,4,7], [2,5,8], [3,6,9], [1,5,9], [3,5,7]]
        for i in win_possibilities:
            row_sum = 0
            for j in i:
                if board[j-1] == player:
                    row_sum +=1
            if row_sum == 3:
                return True     


def play_game():
    board = Board()
    game = Game()
    game.show_board(board)
    player1_symbol = input("Player 1: Please pick between 'X' or 'O' \n")
    player1_symbol = str(player1_symbol).upper()
    while player1_symbol not in ['X', 'O']:
        player1_symbol = str(input("Invalid choice. Please select 'X' or 'O' \n")).upper()      
    
    if player1_symbol == 'X':
        player2_symbol = 'O'
    else:
        player2_symbol = 'X'
    print(f'Player 1 has chosen {player1_symbol} \n')
    print(f'Player 2 will be {player2_symbol} \n')
    print('')
    print('Let the game begin!')
    player1 = Player(player1_symbol)
    player2 = Player(player2_symbol)

    player_dict = {player1_symbol: 'Player 1', player2_symbol : 'Player 2'}
    turns = 0
    while(turns <9):
        if turns > 0:
            print('Please use the below board for reference!')
            print(board.rule_board1)
            print('____________________________________________________ \n')
        print(board.board_a)
        if turns % 2 == 0:
            player = player1
            ask_choice = input('Player1: Where would you like to put your mark? \n')
            while game.check_if_valid_move(ask_choice, board.board_value):
                ask_choice = input('Invalid choice. Please enter a different position. \n')
        else:
            player = player2 
            ask_choice = input('Player2: Where would you like to put your mark? \n')
            while game.check_if_valid_move(ask_choice, board.board_value):
                ask_choice = input('Invalid choice. Please enter a different position. \n')
        
        ask_choice = int(ask_choice)
        board.modify_board(ask_choice, player.symbol)
        if game.check_win(player.symbol, board.board_value) == True:
            print(f'{player_dict[player.symbol]} wins!!!! \n')
            break
        if turns == 8:
            print("It's a tie!")
        turns += 1
        os.system('cls')



play_game()